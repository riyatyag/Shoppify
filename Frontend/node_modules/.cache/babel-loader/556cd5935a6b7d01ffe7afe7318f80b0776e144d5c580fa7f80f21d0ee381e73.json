{"ast":null,"code":"// import React, { useContext, useEffect, useState } from \"react\";\n// import \"./CartItems.css\";\n// import { ShopContext } from \"../../Context/ShopContext\";\n// import remove_icon from \"../Assets/cart_cross_icon.png\";\n// import axios from \"axios\";\n\n// const CartItems = () => {\n//   const {\n//     products,          // changed from all_product to products (same as ShopContext export)\n//     cartItems,\n//     setCartItems,\n//     getTotalCartAmount,\n//   } = useContext(ShopContext);\n\n//   const [promoCode, setPromoCode] = useState(\"\");\n//   const [discountPercent, setDiscountPercent] = useState(0);\n//   const [promoMessage, setPromoMessage] = useState(\"\");\n//   const [loading, setLoading] = useState(true);\n//   const [token, setToken] = useState(null);\n\n//   const totalAmount = getTotalCartAmount();\n//   const discountAmount = (totalAmount * discountPercent) / 100;\n//   const finalAmount = totalAmount - discountAmount;\n\n//   // Load token from localStorage on mount\n//   useEffect(() => {\n//     const storedToken = localStorage.getItem(\"auth-token\");  // <-- Changed here\n//     if (storedToken) {\n//       setToken(storedToken);\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   // Fetch cart when token is available\n//   useEffect(() => {\n//     const fetchCart = async () => {\n//       try {\n//         const res = await axios.post(\n//           \"http://localhost:4001/getcart\",\n//           {},\n//           {\n//             headers: { \"auth-token\": token },\n//           }\n//         );\n//         setCartItems(res.data || {});\n//       } catch (err) {\n//         console.error(\"Failed to fetch cart data:\", err);\n//       }\n//     };\n\n//     if (token) {\n//       fetchCart();\n//     }\n//   }, [token, setCartItems]);\n\n//   // Remove item from cart handler\n//   const handleRemoveFromCart = async (itemId) => {\n//     try {\n//       const res = await axios.post(\n//         \"http://localhost:4001/removefromcart\",\n//         { itemId },\n//         { headers: { \"auth-token\": token } }\n//       );\n//       setCartItems(res.data.cartData);\n//     } catch (err) {\n//       console.error(\"Error removing item from cart:\", err);\n//     }\n//   };\n\n//   const applyPromoCode = async () => {\n//     if (!promoCode.trim()) {\n//       setPromoMessage(\"Please enter a promo code.\");\n//       return;\n//     }\n\n//     try {\n//       const res = await axios.post(\"http://localhost:4001/validate-promo\", {\n//         promoCode: promoCode.trim(),\n//       });\n\n//       if (res.data.success) {\n//         setDiscountPercent(res.data.discount);\n//         setPromoMessage(`Promo code applied! ${res.data.discount}% discount.`);\n//       } else {\n//         setDiscountPercent(0);\n//         setPromoMessage(\"Invalid promo code.\");\n//       }\n//     } catch (err) {\n//       setDiscountPercent(0);\n//       setPromoMessage(\"Server error or invalid code.\");\n//     }\n//   };\n\n//   const proceedToCheckout = () => {\n//     if (finalAmount <= 0) {\n//       alert(\"Cart is empty. Add some items first!\");\n//       return;\n//     }\n\n//     alert(\n//       `Proceeding to checkout\\nSubtotal: â‚¹${totalAmount}\\nDiscount: â‚¹${discountAmount.toFixed(\n//         2\n//       )}\\nTotal to pay: â‚¹${finalAmount.toFixed(2)}`\n//     );\n//   };\n\n//   const isCartEmpty =\n//     !cartItems ||\n//     Object.values(cartItems).reduce((sum, qty) => sum + qty, 0) === 0;\n\n//   if (loading) {\n//     return (\n//       <div className=\"cartItems\">\n//         <p style={{ padding: \"30px\", textAlign: \"center\" }}>Loading cart...</p>\n//       </div>\n//     );\n//   }\n\n//   if (!token) {\n//     return (\n//       <div className=\"cartItems\">\n//         <p style={{ padding: \"30px\", textAlign: \"center\" }}>\n//           ðŸ”’ Please <strong>log in</strong> to view your cart.\n//         </p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"cartItems\">\n//       <div className=\"cartItems-scroll\">\n//         <div className=\"cartItems-format-main\">\n//           <p>Products</p>\n//           <p>Title</p>\n//           <p>Price</p>\n//           <p>Quantity</p>\n//           <p>Total</p>\n//           <p>Remove</p>\n//         </div>\n//         <hr />\n\n//         {Array.isArray(products) && products.length > 0 ? (\n//           products.map((e) => {\n//             if (cartItems[e.id] > 0) {\n//               return (\n//                 <div key={e.id}>\n//                   <div className=\"cartItems-format cartItems-format-main cart-item-row\">\n//                     <img\n//                       src={e.image}\n//                       alt=\"product\"\n//                       className=\"cartItem-product-icon\"\n//                     />\n//                     <p>{e.name}</p>\n//                     <p>â‚¹ {e.new_price}</p>\n//                     <button className=\"cartItem-quantity\">{cartItems[e.id]}</button>\n//                     <p>â‚¹ {e.new_price * cartItems[e.id]}</p>\n//                     <img\n//                       className=\"cartItem-remove-icon\"\n//                       src={remove_icon}\n//                       alt=\"remove\"\n//                       onClick={() => handleRemoveFromCart(e.id)}\n//                     />\n//                   </div>\n//                   <hr />\n//                 </div>\n//               );\n//             }\n//             return null;\n//           })\n//         ) : (\n//           <p style={{ textAlign: \"center\", padding: \"20px\" }}>Your cart is empty.</p>\n//         )}\n//       </div>\n\n//       <div className=\"cartItems-down\">\n//         <div className=\"cartItems-total\">\n//           <h1>Cart Total</h1>\n//           <div>\n//             <div className=\"cartItems-total-item\">\n//               <p>Subtotal</p>\n//               <p>â‚¹{totalAmount.toFixed(2)}</p>\n//             </div>\n//             <hr />\n//             <div className=\"cartItems-total-item\">\n//               <p>Discount</p>\n//               <p>â‚¹{discountAmount.toFixed(2)}</p>\n//             </div>\n//             <hr />\n//             <div className=\"cartItems-total-item\">\n//               <p>Shipping Fee</p>\n//               <p>Free</p>\n//             </div>\n//             <hr />\n//             <div className=\"cartItems-total-item\">\n//               <h3>Total</h3>\n//               <h3>â‚¹{finalAmount.toFixed(2)}</h3>\n//             </div>\n//           </div>\n//           <button onClick={proceedToCheckout} disabled={isCartEmpty}>\n//             PROCEED TO CHECKOUT\n//           </button>\n//         </div>\n\n//         <div className=\"cartItems-promocode\">\n//           <p>If you have a promo code, enter it here:</p>\n//           <div className=\"cartItems-promobox\">\n//             <input\n//               type=\"text\"\n//               placeholder=\"Promo code\"\n//               value={promoCode}\n//               onChange={(e) => setPromoCode(e.target.value)}\n//             />\n//             <button onClick={applyPromoCode}>Apply</button>\n//           </div>\n//           {promoMessage && <p>{promoMessage}</p>}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CartItems;","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Desktop/E-Commerce/Frontend/src/Components/CartItems/CartItems.jsx"],"sourcesContent":["// import React, { useContext, useEffect, useState } from \"react\";\r\n// import \"./CartItems.css\";\r\n// import { ShopContext } from \"../../Context/ShopContext\";\r\n// import remove_icon from \"../Assets/cart_cross_icon.png\";\r\n// import axios from \"axios\";\r\n\r\n// const CartItems = () => {\r\n//   const {\r\n//     products,          // changed from all_product to products (same as ShopContext export)\r\n//     cartItems,\r\n//     setCartItems,\r\n//     getTotalCartAmount,\r\n//   } = useContext(ShopContext);\r\n\r\n//   const [promoCode, setPromoCode] = useState(\"\");\r\n//   const [discountPercent, setDiscountPercent] = useState(0);\r\n//   const [promoMessage, setPromoMessage] = useState(\"\");\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [token, setToken] = useState(null);\r\n\r\n//   const totalAmount = getTotalCartAmount();\r\n//   const discountAmount = (totalAmount * discountPercent) / 100;\r\n//   const finalAmount = totalAmount - discountAmount;\r\n\r\n//   // Load token from localStorage on mount\r\n//   useEffect(() => {\r\n//     const storedToken = localStorage.getItem(\"auth-token\");  // <-- Changed here\r\n//     if (storedToken) {\r\n//       setToken(storedToken);\r\n//     }\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   // Fetch cart when token is available\r\n//   useEffect(() => {\r\n//     const fetchCart = async () => {\r\n//       try {\r\n//         const res = await axios.post(\r\n//           \"http://localhost:4001/getcart\",\r\n//           {},\r\n//           {\r\n//             headers: { \"auth-token\": token },\r\n//           }\r\n//         );\r\n//         setCartItems(res.data || {});\r\n//       } catch (err) {\r\n//         console.error(\"Failed to fetch cart data:\", err);\r\n//       }\r\n//     };\r\n\r\n//     if (token) {\r\n//       fetchCart();\r\n//     }\r\n//   }, [token, setCartItems]);\r\n\r\n//   // Remove item from cart handler\r\n//   const handleRemoveFromCart = async (itemId) => {\r\n//     try {\r\n//       const res = await axios.post(\r\n//         \"http://localhost:4001/removefromcart\",\r\n//         { itemId },\r\n//         { headers: { \"auth-token\": token } }\r\n//       );\r\n//       setCartItems(res.data.cartData);\r\n//     } catch (err) {\r\n//       console.error(\"Error removing item from cart:\", err);\r\n//     }\r\n//   };\r\n\r\n//   const applyPromoCode = async () => {\r\n//     if (!promoCode.trim()) {\r\n//       setPromoMessage(\"Please enter a promo code.\");\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const res = await axios.post(\"http://localhost:4001/validate-promo\", {\r\n//         promoCode: promoCode.trim(),\r\n//       });\r\n\r\n//       if (res.data.success) {\r\n//         setDiscountPercent(res.data.discount);\r\n//         setPromoMessage(`Promo code applied! ${res.data.discount}% discount.`);\r\n//       } else {\r\n//         setDiscountPercent(0);\r\n//         setPromoMessage(\"Invalid promo code.\");\r\n//       }\r\n//     } catch (err) {\r\n//       setDiscountPercent(0);\r\n//       setPromoMessage(\"Server error or invalid code.\");\r\n//     }\r\n//   };\r\n\r\n//   const proceedToCheckout = () => {\r\n//     if (finalAmount <= 0) {\r\n//       alert(\"Cart is empty. Add some items first!\");\r\n//       return;\r\n//     }\r\n\r\n//     alert(\r\n//       `Proceeding to checkout\\nSubtotal: â‚¹${totalAmount}\\nDiscount: â‚¹${discountAmount.toFixed(\r\n//         2\r\n//       )}\\nTotal to pay: â‚¹${finalAmount.toFixed(2)}`\r\n//     );\r\n//   };\r\n\r\n//   const isCartEmpty =\r\n//     !cartItems ||\r\n//     Object.values(cartItems).reduce((sum, qty) => sum + qty, 0) === 0;\r\n\r\n//   if (loading) {\r\n//     return (\r\n//       <div className=\"cartItems\">\r\n//         <p style={{ padding: \"30px\", textAlign: \"center\" }}>Loading cart...</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (!token) {\r\n//     return (\r\n//       <div className=\"cartItems\">\r\n//         <p style={{ padding: \"30px\", textAlign: \"center\" }}>\r\n//           ðŸ”’ Please <strong>log in</strong> to view your cart.\r\n//         </p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"cartItems\">\r\n//       <div className=\"cartItems-scroll\">\r\n//         <div className=\"cartItems-format-main\">\r\n//           <p>Products</p>\r\n//           <p>Title</p>\r\n//           <p>Price</p>\r\n//           <p>Quantity</p>\r\n//           <p>Total</p>\r\n//           <p>Remove</p>\r\n//         </div>\r\n//         <hr />\r\n\r\n//         {Array.isArray(products) && products.length > 0 ? (\r\n//           products.map((e) => {\r\n//             if (cartItems[e.id] > 0) {\r\n//               return (\r\n//                 <div key={e.id}>\r\n//                   <div className=\"cartItems-format cartItems-format-main cart-item-row\">\r\n//                     <img\r\n//                       src={e.image}\r\n//                       alt=\"product\"\r\n//                       className=\"cartItem-product-icon\"\r\n//                     />\r\n//                     <p>{e.name}</p>\r\n//                     <p>â‚¹ {e.new_price}</p>\r\n//                     <button className=\"cartItem-quantity\">{cartItems[e.id]}</button>\r\n//                     <p>â‚¹ {e.new_price * cartItems[e.id]}</p>\r\n//                     <img\r\n//                       className=\"cartItem-remove-icon\"\r\n//                       src={remove_icon}\r\n//                       alt=\"remove\"\r\n//                       onClick={() => handleRemoveFromCart(e.id)}\r\n//                     />\r\n//                   </div>\r\n//                   <hr />\r\n//                 </div>\r\n//               );\r\n//             }\r\n//             return null;\r\n//           })\r\n//         ) : (\r\n//           <p style={{ textAlign: \"center\", padding: \"20px\" }}>Your cart is empty.</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       <div className=\"cartItems-down\">\r\n//         <div className=\"cartItems-total\">\r\n//           <h1>Cart Total</h1>\r\n//           <div>\r\n//             <div className=\"cartItems-total-item\">\r\n//               <p>Subtotal</p>\r\n//               <p>â‚¹{totalAmount.toFixed(2)}</p>\r\n//             </div>\r\n//             <hr />\r\n//             <div className=\"cartItems-total-item\">\r\n//               <p>Discount</p>\r\n//               <p>â‚¹{discountAmount.toFixed(2)}</p>\r\n//             </div>\r\n//             <hr />\r\n//             <div className=\"cartItems-total-item\">\r\n//               <p>Shipping Fee</p>\r\n//               <p>Free</p>\r\n//             </div>\r\n//             <hr />\r\n//             <div className=\"cartItems-total-item\">\r\n//               <h3>Total</h3>\r\n//               <h3>â‚¹{finalAmount.toFixed(2)}</h3>\r\n//             </div>\r\n//           </div>\r\n//           <button onClick={proceedToCheckout} disabled={isCartEmpty}>\r\n//             PROCEED TO CHECKOUT\r\n//           </button>\r\n//         </div>\r\n\r\n//         <div className=\"cartItems-promocode\">\r\n//           <p>If you have a promo code, enter it here:</p>\r\n//           <div className=\"cartItems-promobox\">\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Promo code\"\r\n//               value={promoCode}\r\n//               onChange={(e) => setPromoCode(e.target.value)}\r\n//             />\r\n//             <button onClick={applyPromoCode}>Apply</button>\r\n//           </div>\r\n//           {promoMessage && <p>{promoMessage}</p>}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default CartItems;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}